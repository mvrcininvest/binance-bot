version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: trading-postgres-v91
    hostname: postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: binance_bot
      POSTGRES_USER: bot
      POSTGRES_PASSWORD: botpass
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "127.0.0.1:5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./backups:/backups:rw
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U bot -d binance_bot"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - trading-network

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: trading-redis
    hostname: redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru --requirepass redis123_change_me
    volumes:
      - redis-data:/data
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.2'
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "redis123_change_me", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"
    networks:
      - trading-network

  # Main Trading Bot
  trading-bot:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        BUILD_DATE: ${BUILD_DATE:-}
        VERSION: "9.1"
    container_name: trading-bot-v91
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    hostname: trading-bot
    restart: unless-stopped
    ports:
      - "127.0.0.1:5000:5000"
    env_file:
      - .env
    environment:
      - BOT_VERSION=9.1
      - PYTHONUNBUFFERED=1
      - TZ=UTC
    volumes:
      - ./data:/app/data:rw
      - ./logs:/app/logs:rw
      - ./ml_models:/app/ml_models:rw
      - ./backups:/app/backups:rw
      - .:/app:rw
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.8'
        reservations:
          memory: 512M
          cpus: '0.4'
    dns:
      - 1.1.1.1
      - 8.8.8.8
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:5000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
    security_opt:
      - no-new-privileges:true
    networks:
      - trading-network

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: trading-nginx
    hostname: nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx:rw
    depends_on:
      - trading-bot
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3
    networks:
      - trading-network
    profiles:
      - production

  # Database backup service
  db-backup:
    image: alpine:latest
    container_name: trading-backup
    hostname: backup
    restart: "no"
    environment:
      - BACKUP_RETENTION_DAYS=${BACKUP_RETENTION_DAYS:-7}
    volumes:
      - ./backups:/backups:rw
      - ./scripts:/scripts:ro
    command: |
      sh -c "
      apk add --no-cache postgresql-client
      while true; do
        echo 'Starting PostgreSQL backup...'
        PGPASSWORD=botpass pg_dump -h postgres -U bot -d binance_bot > /backups/trading_bot_$(date +%Y%m%d_%H%M%S).sql
        echo 'Backup completed'
        find /backups -name '*.sql' -mtime +7 -delete
        sleep 21600
      done
      "
    depends_on:
      - postgres
    networks:
      - trading-network
    profiles:
      - backup

networks:
  trading-network:
    driver: bridge
    name: trading-network-v91
    ipam:
      config:
        - subnet: 172.21.0.0/16

volumes:
  redis-data:
    name: trading-redis-data-v91
    driver: local
  postgres-data:
    name: trading-postgres-data-v91
    driver: local